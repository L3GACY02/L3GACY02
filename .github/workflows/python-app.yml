# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pytest

        #Exercice 9.1

import random

def mini(L):
    """Retourne le plus petit élément de la liste L."""
    return min(L)

# Générer une liste de 100 entiers aléatoires entre 1 et 1000
liste = [random.randint(1, 1000) for _ in range(100)]

# Plus petit élément de la liste
plus_petit = mini(liste)

print(f"La liste générée est : {liste}")
print(f"Le plus petit élément est : {plus_petit}")

#9.2

import random

def min2(L):
    """Retourne l'indice de la première occurrence du plus petit élément de la liste L."""
    if not L:  
        return None
    min_value = min(L) 
    return L.index(min_value) 

# Générer une liste de 100 entiers aléatoires entre 1 et 1000
liste = [random.randint(1, 1000) for _ in range(100)]

# Trouver l'indice de la première occurrence du plus petit élément
indice_min = min2(liste)


print(f"La liste générée est : {liste}")
print(f"L'indice de la première occurrence du plus petit élément est : {indice_min}")

#9.3

import random

def min3(L):
    """Retourne la liste des indices de toutes les occurrences du plus petit élément de la liste L."""
    if not L:  # Gérer le cas où la liste est vide
        return []
    
    min_value = min(L)  # Trouver le plus petit élément
    indices = [i for i, value in enumerate(L) if value == min_value]  # Trouver tous les indices du plus petit élément
    
    return indices

# Générer une liste de 100 entiers aléatoires entre 1 et 1000
liste = [random.randint(1, 1000) for _ in range(100)]

# Trouver la liste des indices du plus petit élément
indices_min = min3(liste)

# Afficher la liste et les indices du plus petit élément
print(f"La liste générée est : {liste}")
print(f"Les indices de la plus petite valeur sont : {indices_min}")


      Exercice 10

def ont_une_valeur_commune(liste1, liste2):
    # Convertir les listes en ensembles
    ensemble1 = set(liste1)
    ensemble2 = set(liste2)
    
    # Vérifier s'il existe une intersection entre les deux ensembles
    intersection = ensemble1 & ensemble2
    
    # Si l'intersection n'est pas vide, les listes ont des valeurs communes
    return len(intersection) > 0

EXERCICE 11

def mot_a_l_envers(mot):
    return mot[::-1]

mot = "bonjour"
mot_inverse = mot_a_l_envers(mot)
print(mot_inverse)  # Affiche "ruojnob"

Exercice 12

def est_palindrome(n):
    """Détermine si un nombre entier est un palindrome."""
    # Convertir le nombre en chaîne de caractères
    n_str = str(n)
    
    # Comparer la chaîne avec sa version inversée
    return n_str == n_str[::-1]

# Exemple d'utilisation
nombre = 12321
print(f"{nombre} est un palindrome : {est_palindrome(nombre)}")  # Affiche True

nombre = 12345
print(f"{nombre} est un palindrome : {est_palindrome(nombre)}")  # Affiche False

Exercice 13

def fibonacci(n):
    """Affiche les n premiers termes de la suite de Fibonacci."""
    if n <= 0:
        print("Le nombre de termes doit être positif.")
        return
    
    a, b = 0, 1
    
    # Affichage des termes
    for _ in range(n):
        print(a, end=' ')
        a, b = b, a + b
    print()  

# Exemple d'utilisation
n = 10  # Nombre de termes à afficher
fibonacci(n)

